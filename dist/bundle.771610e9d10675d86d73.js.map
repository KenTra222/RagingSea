{"version":3,"sources":["webpack:///./src/script.js","webpack:///./src/Experience/Experience.js"],"names":["constructor","console","log"],"mappings":"mBAEmB,ICFJ,MACXA,cACIC,QAAQC,IAAI,W","file":"bundle.771610e9d10675d86d73.js","sourcesContent":["import Experience from \"./Experience/Experience\";\n\nconst experience = new Experience()\n\n// import './style.css'\n// import * as THREE from 'three'\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n// import * as dat from 'dat.gui'\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\n\n// /**\n//  * Loaders\n//  */\n// const gltfLoader = new GLTFLoader()\n// const textureLoader = new THREE.TextureLoader()\n// const cubeTextureLoader = new THREE.CubeTextureLoader()\n\n// /**\n//  * Base\n//  */\n// // Debug\n// const gui = new dat.GUI()\n// const debugObject = {}\n\n// // Canvas\n// const canvas = document.querySelector('canvas.webgl')\n\n// // Scene\n// const scene = new THREE.Scene()\n\n// /**\n//  * Update all materials\n//  */\n// const updateAllMaterials = () =>\n// {\n//     scene.traverse((child) =>\n//     {\n//         if(child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial)\n//         {\n//             // child.material.envMap = environmentMap\n//             child.material.envMapIntensity = debugObject.envMapIntensity\n//             child.material.needsUpdate = true\n//             child.castShadow = true\n//             child.receiveShadow = true\n//         }\n//     })\n// }\n\n// /**\n//  * Environment map\n//  */\n// const environmentMap = cubeTextureLoader.load([\n//     '/textures/environmentMap/px.jpg',\n//     '/textures/environmentMap/nx.jpg',\n//     '/textures/environmentMap/py.jpg',\n//     '/textures/environmentMap/ny.jpg',\n//     '/textures/environmentMap/pz.jpg',\n//     '/textures/environmentMap/nz.jpg'\n// ])\n\n// environmentMap.encoding = THREE.sRGBEncoding\n\n// // scene.background = environmentMap\n// scene.environment = environmentMap\n\n// debugObject.envMapIntensity = 0.4\n// gui.add(debugObject, 'envMapIntensity').min(0).max(4).step(0.001).onChange(updateAllMaterials)\n\n// /**\n//  * Models\n//  */\n// let foxMixer = null\n\n// gltfLoader.load(\n//     '/models/Fox/glTF/Fox.gltf',\n//     (gltf) =>\n//     {\n//         // Model\n//         gltf.scene.scale.set(0.02, 0.02, 0.02)\n//         scene.add(gltf.scene)\n\n//         // Animation\n//         foxMixer = new THREE.AnimationMixer(gltf.scene)\n//         const foxAction = foxMixer.clipAction(gltf.animations[0])\n//         foxAction.play()\n\n//         // Update materials\n//         updateAllMaterials()\n//     }\n// )\n\n// /**\n//  * Floor\n//  */\n// const floorColorTexture = textureLoader.load('textures/dirt/color.jpg')\n// floorColorTexture.encoding = THREE.sRGBEncoding\n// floorColorTexture.repeat.set(1.5, 1.5)\n// floorColorTexture.wrapS = THREE.RepeatWrapping\n// floorColorTexture.wrapT = THREE.RepeatWrapping\n\n// const floorNormalTexture = textureLoader.load('textures/dirt/normal.jpg')\n// floorNormalTexture.repeat.set(1.5, 1.5)\n// floorNormalTexture.wrapS = THREE.RepeatWrapping\n// floorNormalTexture.wrapT = THREE.RepeatWrapping\n\n// const floorGeometry = new THREE.CircleGeometry(5, 64)\n// const floorMaterial = new THREE.MeshStandardMaterial({\n//     map: floorColorTexture,\n//     normalMap: floorNormalTexture\n// })\n// const floor = new THREE.Mesh(floorGeometry, floorMaterial)\n// floor.rotation.x = - Math.PI * 0.5\n// scene.add(floor)\n\n// /**\n//  * Lights\n//  */\n// const directionalLight = new THREE.DirectionalLight('#ffffff', 4)\n// directionalLight.castShadow = true\n// directionalLight.shadow.camera.far = 15\n// directionalLight.shadow.mapSize.set(1024, 1024)\n// directionalLight.shadow.normalBias = 0.05\n// directionalLight.position.set(3.5, 2, - 1.25)\n// scene.add(directionalLight)\n\n// gui.add(directionalLight, 'intensity').min(0).max(10).step(0.001).name('lightIntensity')\n// gui.add(directionalLight.position, 'x').min(- 5).max(5).step(0.001).name('lightX')\n// gui.add(directionalLight.position, 'y').min(- 5).max(5).step(0.001).name('lightY')\n// gui.add(directionalLight.position, 'z').min(- 5).max(5).step(0.001).name('lightZ')\n\n// /**\n//  * Sizes\n//  */\n// const sizes = {\n//     width: window.innerWidth,\n//     height: window.innerHeight\n// }\n\n// window.addEventListener('resize', () =>\n// {\n//     // Update sizes\n//     sizes.width = window.innerWidth\n//     sizes.height = window.innerHeight\n\n//     // Update camera\n//     camera.aspect = sizes.width / sizes.height\n//     camera.updateProjectionMatrix()\n\n//     // Update renderer\n//     renderer.setSize(sizes.width, sizes.height)\n//     renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n// })\n\n// /**\n//  * Camera\n//  */\n// // Base camera\n// const camera = new THREE.PerspectiveCamera(35, sizes.width / sizes.height, 0.1, 100)\n// camera.position.set(6, 4, 8)\n// scene.add(camera)\n\n// // Controls\n// const controls = new OrbitControls(camera, canvas)\n// controls.enableDamping = true\n\n// /**\n//  * Renderer\n//  */\n// const renderer = new THREE.WebGLRenderer({\n//     canvas: canvas,\n//     antialias: true\n// })\n// renderer.physicallyCorrectLights = true\n// renderer.outputEncoding = THREE.sRGBEncoding\n// renderer.toneMapping = THREE.CineonToneMapping\n// renderer.toneMappingExposure = 1.75\n// renderer.shadowMap.enabled = true\n// renderer.shadowMap.type = THREE.PCFSoftShadowMap\n// renderer.setClearColor('#211d20')\n// renderer.setSize(sizes.width, sizes.height)\n// renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n// /**\n//  * Animate\n//  */\n// const clock = new THREE.Clock()\n// let previousTime = 0\n\n// const tick = () =>\n// {\n//     const elapsedTime = clock.getElapsedTime()\n//     const deltaTime = elapsedTime - previousTime\n//     previousTime = elapsedTime\n\n//     // Update controls\n//     controls.update()\n\n//     // Fox animation\n//     if(foxMixer)\n//     {\n//         foxMixer.update(deltaTime)\n//     }\n\n//     // Render\n//     renderer.render(scene, camera)\n\n//     // Call tick again on the next frame\n//     window.requestAnimationFrame(tick)\n// }\n\n// tick()","export default class Experience{\n    constructor(){\n        console.log('hiya');\n    }\n}"],"sourceRoot":""}